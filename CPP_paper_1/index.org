#+LANGUAGE: ja
#+OPTIONS: \n:t author:nil creator:nil timestamp:nil html-postamble:nil toc:nil num:nil ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../style1.css" />

#+TITLE: C++ 筆記試験(その１)

** 問1
以下のメンバを持つPlayerクラスを作成せよ。
・レベル、ヒットポイント、攻撃力、防御力(いずれもint型)
・上記メンバの値を表示する関数
・デフォルトコンストラクタ、デストラクタ(いずれも空関数で良い)

メンバ変数はカプセル化し、Playerクラスのメンバ関数以外からは
読み書きできないようにすること。

** 問2
４つのメンバ変数を固定値で初期化する、引数無しの初期化関数を作成せよ。

** 問3
問2で作成した初期化関数をオーバーロードし、４つのメンバ変数を任意の値で初期化できる関数を追加せよ。

** 問4
レベルを指定しなければデフォルト値「１」がメンバ変数に設定され、
値を指定した場合はその値がメンバ変数に設定されるよう、
初期化関数の仕様をデフォルト引数を用いて変更せよ。

** 問5
初期化関数を削除し、同等の機能をコンストラクタだけを用いて実現せよ。
その際、コンストラクタ内でメンバ変数に値を代入するのではなく、
メンバイニシャライザを用いること。

** 問6
Playerクラスと同じメンバを持つEnemyクラスを作成し、PlayerクラスとEnemyクラスにそれぞれ固有のメンバを追加するものとする。
ここで、PlayerクラスとEnemyクラスを汎化したCharacterクラスを作成せよ。
また、それに伴いPlayerクラスとEnemyクラスを以下の条件に従い修正せよ。
- カプセル化を維持するために、Characterクラスのメンバ変数のアクセス修飾子は問1で設定したレベルのままにすること。
- メンバの値を表示する関数をオーバーライドし、Player及びEnemyクラス固有のメンバの値も表示できるようにすること。

** 問7
PlayerクラスとEnemyクラスのインスタンスを生成する際、メンバの初期値の設定方法について以下の２つの案が考えられる。
１.インスタンスを生成する主体が初期値を指定する
２.PlayerクラスとEnemyクラスが初期値を指定する

それぞれに対応したコンストラクタを作成せよ。

** 問8
問7のそれぞれの案の長所・短所を述べよ。
