#+LANGUAGE: ja
#+OPTIONS: \n:t author:nil creator:nil timestamp:nil html-postamble:nil toc:nil num:nil ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../style1.css" />

#+TITLE: C++ 筆記試験(その３)

** 問1
以下のソースコード内の①～⑰を埋めよ。

#+BEGIN_SRC c -n
  #include <iostream>
  
  // using宣言を用い、「std::」と書かなくて済むようにする
  // ※usingディレクティブは使用しないこと
  ①

  // intやfloatなどの数値を共通して扱うためのテンプレートクラス
  ②
  struct MyNum {
      // 変換コンストラクタ
      ③

      T value;
  };
  
  enum class SwapType {
      POINTER,
      REFERENCE
  };
  
  // intやfloat用のMyNumクラスを共通して扱うためのテンプレートクラス
  // ポインタ若しくは参照を用いてswap処理を行なうことができる
  ②
  class Swapper {
  public:
      Swapper(T* first, T* second) :first(first), second(second) {}

      void Swap(SwapType type) {
          switch (type) {
          case SwapType::POINTER:
              Swap_Ptr(④);
              break;
          case SwapType::REFERENCE:
              Swap_Ref(⑤);
              break;
          default:
              break;
          }
      }

  private:
      T* first;
      T* second;

      // ポインタ型の引数を２つ受け取る「Swap_Ptr」という名前のテンプレート関数
      ⑥

      // 参照型の引数を２つ受け取る「Swap_Ref」という名前のテンプレート関数
      ⑦
  };
  
  // 受け取った２つの引数の値を、std::coutを用いて表示する
  ②
  void Display(⑧ const char* pName1, const char* pName2) {
      // 「引数1の名前=引数1の値、引数2の名前=引数2の値<改行>」という形式で表示する処理を一行で書く
      ⑨
  }
  
  int main() {
      // intのMyNum型の変数aとbを宣言し、それぞれ5と10で初期化する
      ⑩

      // aとbを用い、Swapper型のインスタンスintSwapperを生成する
      ⑪

      // Display()を用い、swap前のaとbの値を表示する
      ⑫

      // ポインタを用いてaとbの値を入れ替える
      ⑬

      // Display()を用い、swap前のaとbの値を表示する
      ⑫

      // floatのMyNum型の変数cとdを宣言し、それぞれ1.23fと4.56fで初期化する
      ⑭

      // cとdを用い、Swapper型のインスタンスfloatSwapperを生成する
      ⑮

      // Display()を用い、swap前のcとdの値を表示する
      ⑯

      // 参照を用いてcとdの値を入れ替える
      ⑰

      // Display()を用い、swap前のcとdの値を表示する
      ⑯

      return 0;
  }
#+END_SRC

** 問2
ポインタと参照の使い分けについて、意見を述べよ。

** 問3
下記のクラスについて、問いに答えよ。
#+BEGIN_SRC c -n
  class Character
  {
  public:
      virtual void Attack() = 0;
  };

  class Enemy : public Character
  {
  };

  class Queen : public Enemy
  {
  public:
      virtual void Attack() {
          // 攻撃の処理
      }
  };
#+END_SRC


*** １．
以下のコードがエラーになる理由を述べよ。
#+BEGIN_SRC c -n
  int main()
  {
      Character character;

      return 0;
  }
#+END_SRC

*** ２．
以下のコードがエラーになる理由を述べよ。
#+BEGIN_SRC c -n
  int main()
  {
      Enemy enemy;

      return 0;
  }
#+END_SRC

** 問4
以下のソースコードの①～⑤を埋めよ
#+BEGIN_SRC c -n
  #include <vector>

  class Sample
  {
  public:
      Sample();
      virtual ~Sample();
  private:
      ① m_pIntArray;
      ② m_intVector;
  };

  Sample::Sample()
  {
      // 要素数10のint型の配列をnewし、先頭アドレスをm_pIntArrayに代入
      ③

      // for文を用い、0～18の偶数をm_intVectorに詰める
      ④
  }

  Sample::~Sample()
  {
      // 必要な処理があればここに記述
      ⑤
  }
#+END_SRC
